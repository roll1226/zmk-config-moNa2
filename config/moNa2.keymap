#include <behaviors.dtsi>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/pointing.h>
#include <dt-bindings/zmk/pointing.h>

#define ZMK_POINTING_DEFAULT_SCRL_VAL 100
#define MOUSE 6

&mt {
    flavor = "balanced";
    quick-tap-ms = <0>;
};

/ {
    combos {
        compatible = "zmk,combos";

        singleQu {
            bindings = <&kp SINGLE_QUOTE>;
            key-positions = <20 21>;
            timeout-ms = <800>;
            layers = <0>;
        };

        backquat {
            bindings = <&kp GRAVE>;
            key-positions = <20 21>;
            layers = <2>;
            timeout-ms = <800>;
        };

        tidle {
            bindings = <&kp TILDE>;
            key-positions = <33 32>;
            layers = <2>;
            timeout-ms = <800>;
        };

        windowmax {
            bindings = <&kp LC(LG(UP))>;
            key-positions = <33 32>;
            timeout-ms = <800>;
            layers = <3>;
        };
    };

    macros {
        to_layer_0: to_layer_0 {
            compatible = "zmk,behavior-macro-one-param";
            #binding-cells = <1>;
            bindings = <&to 0 &macro_param_1to1 &kp MACRO_PLACEHOLDER>;
            label = "TO_LAYER_0";
        };
    };

    behaviors {
        lt_to_layer_0: lt_to_layer_0 {
            compatible = "zmk,behavior-hold-tap";
            label = "LAYER_TAP_TO_0";
            bindings = <&mo>, <&to_layer_0>;

            #binding-cells = <2>;
            tapping-term-ms = <200>;
        };

        scroll_up_down: behavior_sensor_rotate_mouse_wheel_up_down {
            compatible = "zmk,behavior-sensor-rotate";
            #sensor-binding-cells = <0>;
            bindings = <&msc SCRL_UP>, <&msc SCRL_DOWN>;

            tap-ms = <20>;
        };
    };

    keymap {
        compatible = "zmk,keymap";

        default_layer {
            bindings = <
&kp Q           &kp W      &kp E      &kp R     &kp T                                      &kp Y             &kp U  &kp I      &kp O    &kp P
&kp A           &kp S      &kp D      &kp F     &kp G        &trans         &kp TAB        &kp H             &kp J  &kp K      &kp L    &kp SEMICOLON
&kp Z           &kp X      &kp C      &kp V     &kp B        &kp LCTRL      &kp BACKSPACE  &kp N             &kp M  &kp COMMA  &kp DOT  &kp SLASH
&kp LEFT_SHIFT  &mkp RCLK  &mkp LCLK  &kp LCMD  &lt 1 LANG2  &lt 3 SPACE    &kp ENTER      &lt 2 LANGUAGE_1                             &kp RIGHT_ALT
            >;

            sensor-bindings = <&scroll_up_down>, <&scroll_up_down>;
        };

        layer_1 {
            bindings = <
&kp NUMBER_1  &kp NUMBER_2  &kp NUMBER_3  &kp NUMBER_4  &kp NUMBER_5                     &kp NUMBER_6    &kp NUMBER_7     &kp NUMBER_8  &kp NUMBER_9              &kp NUMBER_0
&trans        &trans        &trans        &trans        &trans        &trans    &kp ESC  &kp LEFT_ARROW  &kp DOWN         &kp UP_ARROW  &kp RIGHT                 &trans
&trans        &trans        &trans        &trans        &trans        &trans    &kp DEL  &trans          &kp LS(LA(TAB))  &kp LA(TAB)   &kp LS(LG(LEFT_BRACKET))  &kp LS(LG(RIGHT_BRACKET))
&trans        &trans        &trans        &trans        &trans        &trans    &trans   &trans                                                                   &trans
            >;
        };

        layer_2 {
            bindings = <
&kp EXCLAMATION  &kp AT_SIGN  &kp HASH  &kp DOLLAR    &kp PERCENT                     &kp CARET       &kp AMPERSAND  &kp TILDE         &kp LEFT_PARENTHESIS  &kp RIGHT_PARENTHESIS
&trans           &trans       &trans    &trans        &trans        &trans    &trans  &kp MINUS       &kp EQUAL      &kp LEFT_BRACE    &kp RIGHT_BRACE       &kp PIPE
&trans           &trans       &trans    &kp C_VOL_DN  &kp C_VOL_UP  &trans    &trans  &kp UNDERSCORE  &kp PLUS       &kp LEFT_BRACKET  &kp RIGHT_BRACKET     &kp BACKSLASH
&trans           &trans       &trans    &trans        &trans        &trans    &trans  &trans                                                                 &trans
            >;
        };

        layer_3 {
            bindings = <
&trans  &trans  &trans  &trans  &trans                                    &kp LC(LA(LG(LEFT)))        &kp LC(LA(LG(DOWN)))   &kp LA(LC(LG(RIGHT)))     &trans                     &trans
&trans  &trans  &trans  &trans  &trans                  &trans    &trans  &kp LS(LA(LG(LEFT_ARROW)))  &kp LS(LA(LG(RIGHT)))  &kp LS(LA(LC(LG(LEFT))))  &kp LS(LA(LG(LC(RIGHT))))  &trans
&trans  &trans  &trans  &trans  &kp LA(LC(LG(PERIOD)))  &trans    &trans  &kp LC(LG(LEFT))            &kp LC(LG(LS(DOWN)))   &kp LC(LG(LS(UP)))        &kp LC(LG(RIGHT))          &kp LA(LC(LG(UP)))
&trans  &trans  &trans  &trans  &trans                  &trans    &trans  &trans                                                                                                  &trans
            >;
        };

        layer_4 {
            bindings = <
&trans  &trans  &trans  &trans  &trans                         &bt BT_SEL 0  &bt BT_SEL 1  &bt BT_SEL 2  &bt BT_SEL 3  &bt BT_SEL 4
&trans  &trans  &trans  &trans  &trans  &trans    &trans       &trans        &trans        &trans        &trans        &trans
&trans  &trans  &trans  &trans  &trans  &trans    &bootloader  &trans        &trans        &trans        &trans        &bt BT_CLR
&trans  &trans  &trans  &trans  &trans  &trans    &trans       &trans                                                  &bt BT_CLR_ALL
            >;
        };

        layer_5 {
            bindings = <
&trans  &trans  &trans  &trans  &trans                    &trans  &trans  &trans  &trans  &trans
&trans  &trans  &trans  &trans  &trans  &trans    &trans  &trans  &trans  &trans  &trans  &trans
&trans  &trans  &trans  &trans  &trans  &trans    &trans  &trans  &trans  &trans  &trans  &trans
&trans  &trans  &trans  &trans  &trans  &trans    &trans  &trans                          &trans
            >;
        };

        MOUSE {
            bindings = <
&trans  &trans  &trans  &trans  &trans                    &trans  &trans    &trans    &trans    &trans
&trans  &trans  &trans  &trans  &trans  &trans    &trans  &trans  &mkp MB1  &mkp MB3  &mkp MB2  &trans
&trans  &trans  &trans  &trans  &trans  &trans    &trans  &trans  &trans    &trans    &trans    &trans
&trans  &trans  &trans  &trans  &trans  &trans    &trans  &trans                                &trans
            >;
        };
    };
};
